/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin,
  getNotePath: () => getNotePath,
  readNote: () => readNote
});
module.exports = __toCommonJS(main_exports);

// node_modules/@11labs/client/dist/lib.modern.js
function e() {
  return e = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var n2 = arguments[t2];
      for (var a2 in n2)
        ({}).hasOwnProperty.call(n2, a2) && (e2[a2] = n2[a2]);
    }
    return e2;
  }, e.apply(null, arguments);
}
function t(e2) {
  const t2 = new Uint8Array(e2);
  return window.btoa(String.fromCharCode(...t2));
}
function n(e2) {
  const t2 = window.atob(e2), n2 = t2.length, a2 = new Uint8Array(n2);
  for (let e3 = 0; e3 < n2; e3++)
    a2[e3] = t2.charCodeAt(e3);
  return a2.buffer;
}
var a = new Blob([`
      const BIAS = 0x84;
      const CLIP = 32635;
      const encodeTable = [
        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,
        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
      ];
      
      function encodeSample(sample) {
        let sign;
        let exponent;
        let mantissa;
        let muLawSample;
        sign = (sample >> 8) & 0x80;
        if (sign !== 0) sample = -sample;
        sample = sample + BIAS;
        if (sample > CLIP) sample = CLIP;
        exponent = encodeTable[(sample>>7) & 0xFF];
        mantissa = (sample >> (exponent+3)) & 0x0F;
        muLawSample = ~(sign | (exponent << 4) | mantissa);
        
        return muLawSample;
      }
    
      class RawAudioProcessor extends AudioWorkletProcessor {
        constructor() {
          super();
                    
          this.port.onmessage = ({ data }) => {
            this.buffer = []; // Initialize an empty buffer
            this.bufferSize = data.sampleRate / 4;
            
            if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {
              globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {
                this.resampler = resampler;
              });
            } 
          };
        }
        process(inputs) {
          if (!this.buffer) {
            return true;
          }
          
          const input = inputs[0]; // Get the first input node
          if (input.length > 0) {
            let channelData = input[0]; // Get the first channel's data

            // Resample the audio if necessary
            if (this.resampler) {
              channelData = this.resampler.full(channelData);
            }

            // Add channel data to the buffer
            this.buffer.push(...channelData);
            // Get max volume 
            let sum = 0.0;
            for (let i = 0; i < channelData.length; i++) {
              sum += channelData[i] * channelData[i];
            }
            const maxVolume = Math.sqrt(sum / channelData.length);
            // Check if buffer size has reached or exceeded the threshold
            if (this.buffer.length >= this.bufferSize) {
              const float32Array = new Float32Array(this.buffer)
              let encodedArray = this.format === "ulaw"
                ? new Uint8Array(float32Array.length)
                : new Int16Array(float32Array.length);

              // Iterate through the Float32Array and convert each sample to PCM16
              for (let i = 0; i < float32Array.length; i++) {
                // Clamp the value to the range [-1, 1]
                let sample = Math.max(-1, Math.min(1, float32Array[i]));

                // Scale the sample to the range [-32768, 32767]
                let value = sample < 0 ? sample * 32768 : sample * 32767;
                if (this.format === "ulaw") {
                  value = encodeSample(Math.round(value));
                }

                encodedArray[i] = value;
              }

              // Send the buffered data to the main script
              this.port.postMessage([encodedArray, maxVolume]);

              // Clear the buffer after sending
              this.buffer = [];
            }
          }
          return true; // Continue processing
        }
      }
      registerProcessor("raw-audio-processor", RawAudioProcessor);
  `], { type: "application/javascript" });
var s = URL.createObjectURL(a);
function o() {
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
var i = class {
  static async create({ sampleRate: e2, format: t2, preferHeadphonesForIosDevices: n2 }) {
    let a2 = null, r2 = null;
    try {
      const l3 = { sampleRate: { ideal: e2 }, echoCancellation: { ideal: true }, noiseSuppression: { ideal: true } };
      if (o() && n2) {
        const e3 = (await window.navigator.mediaDevices.enumerateDevices()).find((e4) => "audioinput" === e4.kind && ["airpod", "headphone", "earphone"].find((t3) => e4.label.toLowerCase().includes(t3)));
        e3 && (l3.deviceId = { ideal: e3.deviceId });
      }
      const c3 = navigator.mediaDevices.getSupportedConstraints().sampleRate;
      a2 = new window.AudioContext(c3 ? { sampleRate: e2 } : {});
      const u2 = a2.createAnalyser();
      c3 || await a2.audioWorklet.addModule("https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js"), await a2.audioWorklet.addModule(s), r2 = await navigator.mediaDevices.getUserMedia({ audio: l3 });
      const d2 = a2.createMediaStreamSource(r2), h2 = new AudioWorkletNode(a2, "raw-audio-processor");
      return h2.port.postMessage({ type: "setFormat", format: t2, sampleRate: e2 }), d2.connect(u2), u2.connect(h2), await a2.resume(), new i(a2, u2, h2, r2);
    } catch (e3) {
      var l2, c2;
      throw null == (l2 = r2) || l2.getTracks().forEach((e4) => e4.stop()), null == (c2 = a2) || c2.close(), e3;
    }
  }
  constructor(e2, t2, n2, a2) {
    this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e2, this.analyser = t2, this.worklet = n2, this.inputStream = a2;
  }
  async close() {
    this.inputStream.getTracks().forEach((e2) => e2.stop()), await this.context.close();
  }
};
var r = new Blob(['\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case "setFormat":\n                this.format = data.format;\n                break;\n              case "buffer":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === "ulaw"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case "interrupt":\n                this.wasInterrupted = true;\n                break;\n              case "clearInterrupted":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === "ulaw") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: "process", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor("audio-concat-processor", AudioConcatProcessor);\n    '], { type: "application/javascript" });
var l = URL.createObjectURL(r);
var c = class {
  static async create({ sampleRate: e2, format: t2 }) {
    let n2 = null;
    try {
      n2 = new AudioContext({ sampleRate: e2 });
      const a3 = n2.createAnalyser(), s2 = n2.createGain();
      s2.connect(a3), a3.connect(n2.destination), await n2.audioWorklet.addModule(l);
      const o2 = new AudioWorkletNode(n2, "audio-concat-processor");
      return o2.port.postMessage({ type: "setFormat", format: t2 }), o2.connect(s2), await n2.resume(), new c(n2, a3, s2, o2);
    } catch (e3) {
      var a2;
      throw null == (a2 = n2) || a2.close(), e3;
    }
  }
  constructor(e2, t2, n2, a2) {
    this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e2, this.analyser = t2, this.gain = n2, this.worklet = a2;
  }
  async close() {
    await this.context.close();
  }
};
function u(e2) {
  return !!e2.type;
}
var d = class {
  static async create(e2) {
    let t2 = null;
    try {
      var n2;
      const a3 = null != (n2 = e2.origin) ? n2 : "wss://api.elevenlabs.io", s2 = e2.signedUrl ? e2.signedUrl : a3 + "/v1/convai/conversation?agent_id=" + e2.agentId, o2 = ["convai"];
      e2.authorization && o2.push(`bearer.${e2.authorization}`), t2 = new WebSocket(s2, o2);
      const i2 = await new Promise((n3, a4) => {
        t2.addEventListener("open", () => {
          var n4;
          const a5 = { type: "conversation_initiation_client_data" };
          var s3, o3, i3, r3;
          e2.overrides && (a5.conversation_config_override = { agent: { prompt: null == (s3 = e2.overrides.agent) ? void 0 : s3.prompt, first_message: null == (o3 = e2.overrides.agent) ? void 0 : o3.firstMessage, language: null == (i3 = e2.overrides.agent) ? void 0 : i3.language }, tts: { voice_id: null == (r3 = e2.overrides.tts) ? void 0 : r3.voiceId } }), e2.customLlmExtraBody && (a5.custom_llm_extra_body = e2.customLlmExtraBody), e2.dynamicVariables && (a5.dynamic_variables = e2.dynamicVariables), null == (n4 = t2) || n4.send(JSON.stringify(a5));
        }, { once: true }), t2.addEventListener("error", (e3) => {
          setTimeout(() => a4(e3), 0);
        }), t2.addEventListener("close", a4), t2.addEventListener("message", (e3) => {
          const t3 = JSON.parse(e3.data);
          u(t3) && ("conversation_initiation_metadata" === t3.type ? n3(t3.conversation_initiation_metadata_event) : console.warn("First received message is not conversation metadata."));
        }, { once: true });
      }), { conversation_id: r2, agent_output_audio_format: l2, user_input_audio_format: c2 } = i2, p2 = h(null != c2 ? c2 : "pcm_16000"), m2 = h(l2);
      return new d(t2, r2, p2, m2);
    } catch (e3) {
      var a2;
      throw null == (a2 = t2) || a2.close(), e3;
    }
  }
  constructor(e2, t2, n2, a2) {
    this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e2, this.conversationId = t2, this.inputFormat = n2, this.outputFormat = a2, this.socket.addEventListener("error", (e3) => {
      setTimeout(() => this.disconnect({ reason: "error", message: "The connection was closed due to a socket error.", context: e3 }), 0);
    }), this.socket.addEventListener("close", (e3) => {
      this.disconnect(1e3 === e3.code ? { reason: "agent", context: e3 } : { reason: "error", message: e3.reason || "The connection was closed by the server.", context: e3 });
    }), this.socket.addEventListener("message", (e3) => {
      try {
        const t3 = JSON.parse(e3.data);
        if (!u(t3))
          return;
        this.onMessageCallback ? this.onMessageCallback(t3) : this.queue.push(t3);
      } catch (e4) {
      }
    });
  }
  close() {
    this.socket.close();
  }
  sendMessage(e2) {
    this.socket.send(JSON.stringify(e2));
  }
  onMessage(e2) {
    this.onMessageCallback = e2, this.queue.forEach(e2), this.queue = [];
  }
  onDisconnect(e2) {
    this.onDisconnectCallback = e2, this.disconnectionDetails && e2(this.disconnectionDetails);
  }
  disconnect(e2) {
    var t2;
    this.disconnectionDetails || (this.disconnectionDetails = e2, null == (t2 = this.onDisconnectCallback) || t2.call(this, e2));
  }
};
function h(e2) {
  const [t2, n2] = e2.split("_");
  if (!["pcm", "ulaw"].includes(t2))
    throw new Error(`Invalid format: ${e2}`);
  const a2 = parseInt(n2);
  if (isNaN(a2))
    throw new Error(`Invalid sample rate: ${n2}`);
  return { format: t2, sampleRate: a2 };
}
var p = { clientTools: {} };
var m = { onConnect: () => {
}, onDebug: () => {
}, onDisconnect: () => {
}, onError: () => {
}, onMessage: () => {
}, onModeChange: () => {
}, onStatusChange: () => {
}, onCanSendFeedbackChange: () => {
} };
var f = class {
  static async startSession(t2) {
    const n2 = e({}, p, m, t2);
    n2.onStatusChange({ status: "connecting" }), n2.onCanSendFeedbackChange({ canSendFeedback: false });
    let a2 = null, s2 = null, r2 = null, l2 = null;
    try {
      var u2, h2;
      l2 = await navigator.mediaDevices.getUserMedia({ audio: true });
      const p2 = null != (u2 = t2.connectionDelay) ? u2 : { default: 0, android: 3e3 };
      let m2 = p2.default;
      var g;
      if (/android/i.test(navigator.userAgent))
        m2 = null != (g = p2.android) ? g : m2;
      else if (o()) {
        var v;
        m2 = null != (v = p2.ios) ? v : m2;
      }
      return m2 > 0 && await new Promise((e2) => setTimeout(e2, m2)), s2 = await d.create(t2), [a2, r2] = await Promise.all([i.create(e({}, s2.inputFormat, { preferHeadphonesForIosDevices: t2.preferHeadphonesForIosDevices })), c.create(s2.outputFormat)]), null == (h2 = l2) || h2.getTracks().forEach((e2) => e2.stop()), l2 = null, new f(n2, s2, a2, r2);
    } catch (e2) {
      var _, y, w, b;
      throw n2.onStatusChange({ status: "disconnected" }), null == (_ = l2) || _.getTracks().forEach((e3) => e3.stop()), null == (y = s2) || y.close(), await (null == (w = a2) ? void 0 : w.close()), await (null == (b = r2) ? void 0 : b.close()), e2;
    }
  }
  constructor(e2, a2, s2, o2) {
    var i2 = this;
    this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.lastInterruptTimestamp = 0, this.mode = "listening", this.status = "connecting", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = false, this.endSession = () => this.endSessionWithDetails({ reason: "user" }), this.endSessionWithDetails = async function(e3) {
      "connected" !== i2.status && "connecting" !== i2.status || (i2.updateStatus("disconnecting"), i2.connection.close(), await i2.input.close(), await i2.output.close(), i2.updateStatus("disconnected"), i2.options.onDisconnect(e3));
    }, this.updateMode = (e3) => {
      e3 !== this.mode && (this.mode = e3, this.options.onModeChange({ mode: e3 }));
    }, this.updateStatus = (e3) => {
      e3 !== this.status && (this.status = e3, this.options.onStatusChange({ status: e3 }));
    }, this.updateCanSendFeedback = () => {
      const e3 = this.currentEventId !== this.lastFeedbackEventId;
      this.canSendFeedback !== e3 && (this.canSendFeedback = e3, this.options.onCanSendFeedbackChange({ canSendFeedback: e3 }));
    }, this.onMessage = async function(e3) {
      switch (e3.type) {
        case "interruption":
          e3.interruption_event && (i2.lastInterruptTimestamp = e3.interruption_event.event_id), i2.fadeOutAudio();
          break;
        case "agent_response":
          i2.options.onMessage({ source: "ai", message: e3.agent_response_event.agent_response });
          break;
        case "user_transcript":
          i2.options.onMessage({ source: "user", message: e3.user_transcription_event.user_transcript });
          break;
        case "internal_tentative_agent_response":
          i2.options.onDebug({ type: "tentative_agent_response", response: e3.tentative_agent_response_internal_event.tentative_agent_response });
          break;
        case "client_tool_call":
          if (i2.options.clientTools.hasOwnProperty(e3.client_tool_call.tool_name)) {
            try {
              var t2;
              const n2 = null != (t2 = await i2.options.clientTools[e3.client_tool_call.tool_name](e3.client_tool_call.parameters)) ? t2 : "Client tool execution successful.";
              i2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: n2, is_error: false });
            } catch (t3) {
              i2.onError("Client tool execution failed with following error: " + (null == t3 ? void 0 : t3.message), { clientToolName: e3.client_tool_call.tool_name }), i2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: "Client tool execution failed: " + (null == t3 ? void 0 : t3.message), is_error: true });
            }
            break;
          }
          if (i2.options.onUnhandledClientToolCall) {
            i2.options.onUnhandledClientToolCall(e3.client_tool_call);
            break;
          }
          i2.onError(`Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, { clientToolName: e3.client_tool_call.tool_name }), i2.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: `Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, is_error: true });
          break;
        case "audio":
          i2.lastInterruptTimestamp <= e3.audio_event.event_id && (i2.addAudioBase64Chunk(e3.audio_event.audio_base_64), i2.currentEventId = e3.audio_event.event_id, i2.updateCanSendFeedback(), i2.updateMode("speaking"));
          break;
        case "ping":
          i2.connection.sendMessage({ type: "pong", event_id: e3.ping_event.event_id });
          break;
        default:
          i2.options.onDebug(e3);
      }
    }, this.onInputWorkletMessage = (e3) => {
      "connected" === this.status && this.connection.sendMessage({ user_audio_chunk: t(e3.data[0].buffer) });
    }, this.onOutputWorkletMessage = ({ data: e3 }) => {
      "process" === e3.type && this.updateMode(e3.finished ? "listening" : "speaking");
    }, this.addAudioBase64Chunk = (e3) => {
      this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" }), this.output.worklet.port.postMessage({ type: "buffer", buffer: n(e3) });
    }, this.fadeOutAudio = () => {
      this.updateMode("listening"), this.output.worklet.port.postMessage({ type: "interrupt" }), this.output.gain.gain.exponentialRampToValueAtTime(1e-4, this.output.context.currentTime + 2), setTimeout(() => {
        this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" });
      }, 2e3);
    }, this.onError = (e3, t2) => {
      console.error(e3, t2), this.options.onError(e3, t2);
    }, this.calculateVolume = (e3) => {
      if (0 === e3.length)
        return 0;
      let t2 = 0;
      for (let n2 = 0; n2 < e3.length; n2++)
        t2 += e3[n2] / 255;
      return t2 /= e3.length, t2 < 0 ? 0 : t2 > 1 ? 1 : t2;
    }, this.getId = () => this.connection.conversationId, this.isOpen = () => "connected" === this.status, this.setVolume = ({ volume: e3 }) => {
      this.volume = e3;
    }, this.getInputByteFrequencyData = () => (null != this.inputFrequencyData || (this.inputFrequencyData = new Uint8Array(this.input.analyser.frequencyBinCount)), this.input.analyser.getByteFrequencyData(this.inputFrequencyData), this.inputFrequencyData), this.getOutputByteFrequencyData = () => (null != this.outputFrequencyData || (this.outputFrequencyData = new Uint8Array(this.output.analyser.frequencyBinCount)), this.output.analyser.getByteFrequencyData(this.outputFrequencyData), this.outputFrequencyData), this.getInputVolume = () => this.calculateVolume(this.getInputByteFrequencyData()), this.getOutputVolume = () => this.calculateVolume(this.getOutputByteFrequencyData()), this.sendFeedback = (e3) => {
      this.canSendFeedback ? (this.connection.sendMessage({ type: "feedback", score: e3 ? "like" : "dislike", event_id: this.currentEventId }), this.lastFeedbackEventId = this.currentEventId, this.updateCanSendFeedback()) : console.warn(0 === this.lastFeedbackEventId ? "Cannot send feedback: the conversation has not started yet." : "Cannot send feedback: feedback has already been sent for the current response.");
    }, this.options = e2, this.connection = a2, this.input = s2, this.output = o2, this.options.onConnect({ conversationId: a2.conversationId }), this.connection.onDisconnect(this.endSessionWithDetails), this.connection.onMessage(this.onMessage), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus("connected");
  }
};

// main.ts
var import_obsidian = require("obsidian");
function getNotePath(app, title) {
  const fileName = title.replace(/[/\\?%*:|"<>]/g, "-").trim() + ".md";
  const files = app.vault.getFiles();
  const file = files.find((f2) => f2.name === fileName);
  return file ? file.path : null;
}
async function readNote(app, title) {
  const path = getNotePath(app, title);
  if (!path)
    return null;
  const file = app.vault.getAbstractFileByPath(path);
  if (file instanceof import_obsidian.TFile) {
    return await app.vault.read(file);
  }
  return null;
}
var DEFAULT_SETTINGS = {
  agentId: ""
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "dice",
      "Sample Plugin",
      (evt) => {
        new SampleModal(this.app, this.settings).open();
      }
    );
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-voice-ai-agent",
      name: "Open ElevenLabs Conversational AI",
      callback: () => {
        new SampleModal(this.app, this.settings).open();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app, settings) {
    super(app);
    this.settings = settings;
    this.conversation = null;
  }
  async onOpen() {
    const { contentEl, conversation } = this;
    contentEl.setText("Woah!");
    this.conversation = await f.startSession({
      // agentId: "hVo4wiqvqg0jPtI4tiTp",
      agentId: this.settings.agentId,
      clientTools: {
        saveNote: async ({ message }) => {
          console.log(message);
          await this.app.vault.create("New Note.md", message);
        },
        getNote: async ({ noteName }) => {
          console.log(noteName);
          const content = await readNote(this.app, noteName);
          if (content) {
            console.log(content);
            return content;
          }
          return "";
        }
      }
    });
  }
  async onClose() {
    const { contentEl } = this;
    if (this.conversation) {
      await this.conversation.endSession();
    }
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("ElevenLabs Agent Id").setDesc("ElevenLabs Agent Id").addText(
      (text) => text.setPlaceholder("Enter your Agent Id").setValue(this.plugin.settings.agentId).onChange(async (value) => {
        this.plugin.settings.agentId = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
